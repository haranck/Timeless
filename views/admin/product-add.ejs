<%- include("../../views/partials/admin/header") %>

    <head>
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    </head>
    <style>
        /* Professional Product Add Page Styling */
        body {
            background-color: #f4f7f6;
        }

        .content-main {
            margin: 30px;
            margin-left: 280px;
            margin-right: 50px;
            transition: all 0.3s ease;
        }

        @media (max-width: 992px) {
            .content-main {
                margin-left: 20px;
                margin-right: 20px;
            }
        }

        .content-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e9ecef;
        }

        .content-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: #2c3e50;
            margin: 0;
        }

        .card {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.08);
            border: none;
            transition: all 0.3s ease;
        }

        .card:hover {
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            transform: translateY(-5px);
        }

        .card-body {
            padding: 30px;
        }

        /* Form Styling */
        .form-label {
            font-weight: 600;
            color: #34495e;
            margin-bottom: 10px;
            transition: color 0.3s ease;
        }

        .form-control,
        .form-select {
            border: 1px solid #d1d8e0;
            border-radius: 8px;
            padding: 12px 15px;
            font-size: 0.95rem;
            transition: all 0.3s ease;
            background-color: #f9fbfc;
        }

        .form-control:focus,
        .form-select:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.15);
            background-color: white;
        }

        /* Error Message Styling */
        .error-message {
            color: #e74c3c;
            font-size: 0.85rem;
            margin-top: 5px;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* File Input Styling */
        .form-control[type="file"] {
            padding: 8px 12px;
            border: 2px dashed #e0e4e8;
            background-color: #f9fbfc;
        }

        .form-control[type="file"]:hover {
            border-color: #3498db;
        }

        /* Button Styling */
        .btn {
            background-color: #2ecc71;
            color: white;
            border: none;
            padding: 12px 25px;
            font-size: 1rem;
            font-weight: 600;
            border-radius: 8px;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            text-transform: uppercase;
        }

        .btn:hover {
            background-color: #27ae60;
            transform: translateY(-3px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        }

        /* Thumbnails Container */
        .thumbnails-container {
            display: flex;
            gap: 15px;
            overflow-x: auto;
            padding-bottom: 10px;
            scrollbar-width: thin;
            scrollbar-color: #3498db #e0e4e8;
        }

        .thumbnails-container::-webkit-scrollbar {
            height: 8px;
        }

        .thumbnails-container::-webkit-scrollbar-track {
            background: #e0e4e8;
            border-radius: 10px;
        }

        .thumbnails-container::-webkit-scrollbar-thumb {
            background-color: #3498db;
            border-radius: 10px;
        }

        .thumbnail {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .thumbnail:hover {
            transform: scale(1.05);
        }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            .content-main {
                margin: 15px;
            }

            .card-body {
                padding: 20px;
            }

            .btn {
                width: 100%;
            }
        }

        /* Image Upload Section Styles */
        /* .image-upload-section {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
        }

        .image-upload-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .image-upload-row {
            display: flex;
            align-items: center;
            gap: 20px;
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .image-upload-row:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
        }

        .image-preview {
            width: 150px;
            height: 150px;
            object-fit: cover;
            border-radius: 10px;
            border: 2px dashed #e0e4e8;
            transition: all 0.3s ease;
        }

        .image-preview:hover {
            border-color: #3498db;
        }

        .image-cropper {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-top: 10px;
        }

        .image-cropper img {
            max-width: 300px;
            max-height: 200px;
            border-radius: 8px;
        }

        .save-button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            transition: all 0.3s ease;
        }

        .save-button:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

        .file-input {
            flex-grow: 1;
        }

        .file-input-wrapper {
            display: flex;
            align-items: center;
            gap: 15px;
            width: 100%;
        } */
         /* Image Upload Section Styles */
.image-upload-section {
    background-color: #f8f9fa;
    border-radius: 10px;
    padding: 20px;
    margin-top: 20px;
}

.image-upload-container {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.image-upload-row {
    display: flex;
    flex-direction: column;
    gap: 15px;
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.file-input-wrapper {
    display: flex;
    align-items: center;
    gap: 15px;
    width: 100%;
}

.image-preview {
    width: 200px;
    height: 200px;
    object-fit: cover;
    border-radius: 8px;
    border: 2px dashed #e0e4e8;
}

.image-cropper {
    display: none;
    flex-direction: column;
    align-items: center;
    gap: 10px;
    margin-top: 15px;
}

.image-cropper img {
    max-width: 200px;
    max-height: 200px;
    border-radius: 8px;
    object-fit: cover;
}

.save-button {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 8px 20px;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.save-button:hover {
    background-color: #2980b9;
    transform: translateY(-2px);
}

/* Thumbnails styling */
.thumbnails-container {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    margin-bottom: 20px;
}

.thumbnail-wrapper {
    position: relative;
    width: 100px;
    height: 100px;
}

.thumbnail {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
    border: 2px solid #e0e4e8;
}

.remove-thumbnail {
    position: absolute;
    top: -8px;
    right: -8px;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background-color: #e74c3c;
    color: white;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.remove-thumbnail:hover {
    background-color: #c0392b;
}
</style>

    <section class="content-main">
        <div class="row">
            <div class="col-12">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-8 mx-auto">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="POST" action="/admin/addProducts" enctype="multipart/form-data"
                            id="addProductForm" onsubmit="return validateForm()">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName" class="form-control"
                                    id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label class="form-label">Full Description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description"
                                    class="form-control" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4 mb-4">
                                    <label class="form-label">Regular Price</label>
                                    <input placeholder="regularPrice" name="regularPrice" type="text" class="form-control">
                                    <div id="regularPrice-error" class="error-message"></div>
                                </div>
                                <div class="col-lg-4 mb-4">
                                    <label class="form-label">Sale Price</label>
                                    <input placeholder="salePrice" name="salePrice" type="text" class="form-control">
                                    <div id="salePrice-error" class="error-message"></div>
                                </div>
                                <div class="col-lg-4 mb-4">
                                    <label class="form-label">Quantity</label>
                                    <input placeholder="quantity" name="quantity" type="text" class="form-control">
                                    <div id="quantity-error" class="error-message"></div>
                                </div>
                            </div>
                            <div class="row">
                                <!-- <div class="col-lg-4 mb-4">
                                <label class="form-label">Color</label>
                                <input name="color" type="text" class="form-control">
                                <div id="color-error" class="error-message"></div>
                            </div> -->
                                <div class="col-lg-4 mb-4">
                                    <label class="form-label">Category</label>
                                    <select class="form-select" name="category">
                                        <% for(let i=0 ;i<cat.length;i++){ %>
                                            <option value="<%=cat[i].name %>">
                                                <%=cat[i].name %>
                                            </option>
                                            <% } %>
                                                <!-- Add dynamic category options -->
                                    </select>
                                    <div id="category-error" class="error-message"></div>
                                </div>


                                <div class="col-lg-4 mb-4">
                                    <label class="form-label">Brand</label>
                                    <select class="form-select" name="brand">
                                        <% for(let i=0 ;i< brand.length;i++){ %>
                                            <option value="<%=brand[i].brandName %>">
                                                <%=brand[i].brandName %>
                                            </option>
                                            <% } %>
                                                
                                    </select>
                                    <div id="brand-error" class="error-message"></div>
                                </div>


                            </div>
                            <div class="card mb-4 image-upload-section">
                                <div class="card-header">
                                    <h4>Choose Images</h4>
                                </div>
                                <div class="card-body">
                                    <div class="border row mb-3">
                                        <div id="addedImagesContainer" class="thumbnails-container"></div>
                                    </div>
                                    <div class="image-upload-container">
                                        <!-- First Image Upload -->
                                        <div class="image-upload-row">
                                            <div class="file-input-wrapper">
                                                <img src="" alt="Image Preview" id="imgView1" class="image-preview">
                                                <input class="form-control file-input" type="file" name="images"
                                                    id="input1" accept="image/png, image/jpeg, image/jpg"
                                                    onchange="viewImage1(event), viewImage(event, 1)">
                                            </div>
                                            <div class="image-cropper" style="display:none;">
                                                <img src="" id="croppedImg1" alt="Cropped Image">
                                                <button type="button" id="saveButton1"
                                                    class="btn-sm save-button">Save</button>
                                            </div>
                                            <div id="images-error" class="error-message"></div>
                                        </div>

                                        <!-- Second Image Upload -->
                                        <div class="image-upload-row">
                                            <div class="file-input-wrapper">
                                                <img src="" alt="Image Preview" id="imgView2" class="image-preview">
                                                <input class="form-control file-input" type="file" name="images"
                                                    id="input2" accept="image/png, image/jpeg, image/jpg"
                                                    onchange="viewImage2(event), viewImage(event, 2)">
                                            </div>
                                            <div class="image-cropper" style="display:none;">
                                                <img src="" id="croppedImg2" alt="Cropped Image">
                                                <button type="button" id="saveButton2"
                                                    class="btn-sm save-button">Save</button>
                                            </div>
                                        </div>

                                        <!-- Third Image Upload -->
                                        <div class="image-upload-row">
                                            <div class="file-input-wrapper">
                                                <img src="" alt="Image Preview" id="imgView3" class="image-preview">
                                                <input class="form-control file-input" type="file" name="images"
                                                    id="input3" accept="image/png, image/jpeg, image/jpg"
                                                    onchange="viewImage3(event), viewImage(event, 3)">
                                            </div>
                                            <div class="image-cropper" style="display:none;">
                                                <img src="" id="croppedImg3" alt="Cropped Image">
                                                <button type="button" id="saveButton3"
                                                    class="btn-sm save-button">Save</button>
                                            </div>
                                        </div>


                                    </div>
                                </div>
                            </div>
                            <div>
                                <button class="btn btn-md rounded font-sm hover-up" onclick="return validateAndSubmit()"
                                    type="submit">
                                    Publish
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            <% if(typeof message !=='undefined' ) {%>
                <p class="text-danger">
                    <%= message %>
                </p>
                <% } %>
        </div>
    </section>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let croppedImagesCount = 0;
        let deletedImages = [];

        function validateForm() {
            const totalImages = document.querySelectorAll('#addedImagesContainer .thumbnail').length;

            if (totalImages < 3 || totalImages > 4) {
                Swal.fire({
                    icon: 'error',
                    title: 'Image Count Invalid',
                    text: 'You must have between 3 and 4 images in total',
                    confirmButtonColor: '#3085d6'
                });
                return false;
            }

            // Confirmation before submitting
            Swal.fire({
                title: 'Add Product',
                text: 'Are you sure you want to add this product?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, add it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    document.getElementById('addProductForm').submit();
                }
            });

            return false; // Prevent immediate form submission
        }

        function handleFileUpload(input) {
            const file = input.files[0];
            const reader = new FileReader();
            const cropperImage = document.getElementById('cropperImage');

            // Validate file type
            const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
            if (!validTypes.includes(file.type)) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid File Type',
                    text: 'Please upload a valid image (JPEG, PNG, or GIF)',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }

            reader.onload = function (e) {
                cropperImage.src = e.target.result;

                // Destroy existing cropper if any
                if (cropper) {
                    cropper.destroy();
                }

                // Initialize Cropper
                cropper = new Cropper(cropperImage, {
                    aspectRatio: 1, // Square crop
                    viewMode: 1,
                    minCropBoxWidth: 100,
                    minCropBoxHeight: 100
                });

                // Show modal
                document.getElementById('cropperModal').style.display = 'block';
            };
            reader.readAsDataURL(file);
        }

        function saveCroppedImage() {
            if (!cropper) return;

            // Validate total images
            const totalImages = document.querySelectorAll('#addedImagesContainer .thumbnail').length;
            if (totalImages >= 4) {
                Swal.fire({
                    icon: 'error',
                    title: 'Image Count Invalid',
                    text: 'Maximum 4 images allowed',
                    confirmButtonColor: '#3085d6'
                });
                closeCropperModal();
                return;
            }

            // Get cropped image
            const croppedCanvas = cropper.getCroppedCanvas();
            const croppedDataUrl = croppedCanvas.toDataURL('image/jpeg');

            // Create thumbnail
            const thumbnailContainer = document.createElement('div');
            thumbnailContainer.className = 'thumbnail';
            const thumbnailImg = document.createElement('img');
            thumbnailImg.src = croppedDataUrl;
            const removeButton = document.createElement('button');
            removeButton.type = 'button';
            removeButton.className = 'remove-image-btn';
            removeButton.innerHTML = '&times;';
            removeButton.onclick = function () {
                removeCroppedImage(thumbnailContainer);
            };

            thumbnailContainer.appendChild(thumbnailImg);
            thumbnailContainer.appendChild(removeButton);
            document.getElementById('addedImagesContainer').appendChild(thumbnailContainer);

            // Increment cropped images count
            croppedImagesCount++;

            // Clear file input
            document.getElementById('imageUpload').value = '';

            // Close modal
            closeCropperModal();
        }

        function removeCroppedImage(thumbnailContainer) {
            Swal.fire({
                title: 'Remove Image',
                text: 'Are you sure you want to remove this image?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, remove it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Remove thumbnail
                    thumbnailContainer.remove();

                    // Decrement cropped images count
                    croppedImagesCount--;

                    Swal.fire({
                        icon: 'success',
                        title: 'Image Removed',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 2000
                    });
                }
            });
        }

        function closeCropperModal() {
            // Hide modal
            document.getElementById('cropperModal').style.display = 'none';

            // Destroy cropper
            if (cropper) {
                cropper.destroy();
                cropper = null;
            }

            // Clear file input
            document.getElementById('imageUpload').value = '';
        }

        // Image View and Cropping Functions
        function viewImage(event, inputNumber) {
            const file = event.target.files[0];
            const imgView = document.getElementById(`imgView${inputNumber}`);
            const imageCropper = document.querySelector(`#input${inputNumber}`).closest('.image-upload-row').querySelector('.image-cropper');
            const croppedImg = document.getElementById(`croppedImg${inputNumber}`);

            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    imgView.src = e.target.result;
                    croppedImg.src = e.target.result;
                    imageCropper.style.display = 'flex';
                }
                reader.readAsDataURL(file);
            }
        }

        // Individual view functions (for compatibility)
        function viewImage1(event) { viewImage(event, 1); }
        function viewImage2(event) { viewImage(event, 2); }
        function viewImage3(event) { viewImage(event, 3); }
        function viewImage4(event) { viewImage(event, 4); }

        // Form Validation
        function validateForm() {
            let isValid = true;
            const requiredFields = ['productName', 'description', 'regularPrice', 'category'];
            console.log(requiredFields)
            requiredFields.forEach(field => {
                const input = document.querySelector(`[name="${field}"]`);
                const errorElement = document.getElementById(`${field}-error`);

                if (!input.value.trim()) {
                    errorElement.textContent = `${field.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())} is required`;
                    isValid = false;
                } else {
                    errorElement.textContent = '';
                }
            });

            return isValid;
        }

        // Submit Handler
        function validateAndSubmit() {
            console.log("reaching here")
            if (validateForm()) {
                document.forms[0].submit();
            }
        }

        function viewImage1(event) {
            document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
        }
        function viewImage2(event) {
            document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
        }
        function viewImage3(event) {
            document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
        }

        let croppers = {};

function viewImage(event, index) {
    const input = event.target;
    const reader = new FileReader();
    const imgView = document.getElementById(`imgView${index}`);
    const cropperContainer = document.querySelector(`#input${index}`).closest('.image-upload-row');
    const croppedImgContainer = cropperContainer.querySelector('.image-cropper');
    const croppedImg = document.getElementById(`croppedImg${index}`);

    reader.onload = function() {
        // Destroy existing cropper if any
        if (croppers[index]) {
            croppers[index].destroy();
        }

        imgView.src = reader.result;
        
        // Initialize Cropper
        croppers[index] = new Cropper(imgView, {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 0.8,
            cropBoxResizable: true,
            dragMode: 'move',
            ready: function() {
                croppedImgContainer.style.display = 'flex';
            }
        });

        // Save button handler
        document.querySelector(`#saveButton${index}`).onclick = async function() {
            const canvas = croppers[index].getCroppedCanvas({
                width: 440,
                height: 440
            });

            // Convert canvas to blob
            canvas.toBlob(async (blob) => {
                // Create new file from blob
                const timestamp = new Date().getTime();
                const fileName = `cropped-img-${timestamp}-${index}.jpeg`;
                const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });

                // Create a new FileList with the cropped image
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(croppedFile);
                
                // Update the file input
                document.getElementById(`input${index}`).files = dataTransfer.files;

                // Update preview
                croppedImg.src = canvas.toDataURL('image/jpeg');
                
                // Show cropped result
                imgView.style.display = 'none';
                croppedImg.style.display = 'block';
                
                // Destroy cropper
                croppers[index].destroy();
                croppers[index] = null;

                // Update thumbnails
                updateThumbnails();
            }, 'image/jpeg', 0.9);
        };
    };

    if (input.files && input.files[0]) {
        reader.readAsDataURL(input.files[0]);
    }
}

function updateThumbnails() {
    const container = document.getElementById('addedImagesContainer');
    container.innerHTML = '';

    // Collect all uploaded images
    const inputs = document.querySelectorAll('input[type="file"][name="images"]');
    inputs.forEach((input, index) => {
        if (input.files && input.files[0]) {
            const thumbnail = document.createElement('div');
            thumbnail.className = 'thumbnail-wrapper';
            
            const img = document.createElement('img');
            img.className = 'thumbnail';
            img.src = URL.createObjectURL(input.files[0]);
            
            const removeBtn = document.createElement('button');
            removeBtn.className = 'remove-thumbnail';
            removeBtn.innerHTML = '×';
            removeBtn.onclick = () => {
                input.value = '';
                const croppedImg = document.getElementById(`croppedImg${index + 1}`);
                const imgView = document.getElementById(`imgView${index + 1}`);
                croppedImg.src = '';
                imgView.src = '';
                imgView.style.display = 'block';
                thumbnail.remove();
            };

            thumbnail.appendChild(img);
            thumbnail.appendChild(removeBtn);
            container.appendChild(thumbnail);
        }
    });
}

// Form validation with image check
function validateForm() {
    let isValid = true;
    const errors = {};

    // Basic field validation
    const requiredFields = ['productName', 'description', 'regularPrice', 'category'];
    requiredFields.forEach(field => {
        const input = document.querySelector(`[name="${field}"]`);
        if (!input.value.trim()) {
            errors[field] = `${field.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())} is required`;
            isValid = false;
        }
    });

    // Image validation
    const imageInputs = document.querySelectorAll('input[type="file"][name="images"]');
    let imageCount = 0;
    imageInputs.forEach(input => {
        if (input.files && input.files[0]) {
            imageCount++;
        }
    });

    if (imageCount < 3) {
        errors.images = 'At least 3 images are required';
        isValid = false;
    }

    // Display errors
    Object.keys(errors).forEach(field => {
        const errorElement = document.getElementById(`${field}-error`);
        if (errorElement) {
            errorElement.textContent = errors[field];
        }
    });

    return isValid;
}

    </script>

    <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
    <%- include("../../views/partials/admin/footer") %>