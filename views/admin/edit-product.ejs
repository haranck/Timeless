<%- include("../../views/partials/admin/header") %>

<head>
    <style>
        .thumbnails-container {
            display: flex;
            overflow-x: auto;
            margin-bottom: 15px;
        }

        .thumbnail {
            margin-right: 10px;
        }

        .input-upload {
            position: relative;
        }

        .error-message {
            color: red;
            display: none;
        }

        .card-body {
            padding: 20px;
        }

        /* Form Styling */
        .form-label {
            font-weight: bold;
        }

        .form-control {
            margin-bottom: 15px;
        }

        /* Sidebar layout */
        .content-main {
            margin-left: 20px;
            margin-right: 20px;
            margin-top: 50px;
        }

        /* Image preview */
        #imgView1 {
            max-width: 100%;
            height: auto;
            margin-bottom: 10px;
        }

        .card-header {
            background-color: #f5f5f5;
            padding: 10px;
        }

        .btn-update {
            margin-top: 20px;
        }

        .col-lg-4 {
            width: 100%;
        }

        .col-lg-8 {
            width: 100%;
        }

        .save-button {
            display: none;
            margin-top: 15px;
        }

        .image-upload-section {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
        }

        .image-upload-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .image-upload-row {
            display: flex;
            align-items: center;
            gap: 20px;
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }

        .image-upload-row:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
        }

        .image-preview {
            width: 150px;
            height: 150px;
            object-fit: cover;
            border-radius: 10px;
            border: 2px dashed #e0e4e8;
            transition: all 0.3s ease;
        }

        .image-preview:hover {
            border-color: #3498db;
        }

        .image-cropper {
            display: none;
            align-items: center;
            gap: 15px;
            margin-top: 10px;
        }

        .image-cropper img {
            max-width: 300px;
            max-height: 200px;
            border-radius: 8px;
        }

        .save-button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 6px;
            transition: all 0.3s ease;
        }

        .save-button:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

        /* Image Upload Styles */
        .image-preview-container {
            width: 200px;
            height: 200px;
            border: 2px dashed #ccc;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 15px;
            position: relative;
        }

        .image-preview {
            max-width: 100%;
            max-height: 100%;
            object-fit: contain;
        }

        .remove-preview-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(255,0,0,0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }

        /* Cropper Modal Styles */
        #cropperModal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            display: none;
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        #cropperModal .modal-dialog {
            max-width: 80%;
            margin: auto;
        }

        .cropper-container {
            max-height: 70vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #imagePreviewContainer {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 15px;
        }

        .preview-item {
            position: relative;
            width: 100px;
            height: 100px;
        }

        .preview-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .preview-item .btn {
            position: absolute;
            top: 5px;
            font-size: 0.6rem;
            padding: 0.1rem 0.3rem;
        }

        .preview-item .crop-btn {
            left: 5px;
        }

        .preview-item .remove-btn {
            right: 5px;
        }
    </style>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
</head>

<section class="content-main">
    <div class="row">
        <div class="col-9">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
        </div>

        <div class="col-lg-8">
            <div class="card mb-4"  style="margin-left: 250px;">
                <div class="card-body">
                    <form method="post" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data" onsubmit="return validateForm()" class="edit-product-form">
                        <!-- Product Name -->
                        <div class="mb-4">
                            <label for="product_name" class="form-label">Product Name</label>
                            <input type="text" name="productName" value="<%= product.productName %>" class="form-control border" id="product_name">
                            <div id="productName-error" class="error-message"></div>
                        </div>

                        <!-- Product Description -->
                        <div class="mb-4">
                            <label for="description" class="form-label">Full Description</label>
                            <textarea name="descriptionData" class="form-control border" rows="4"><%= product.description %></textarea>
                            <div id="description-error" class="error-message"></div>
                        </div>

                        <!-- Regular Price -->
                        <div class="col-lg-4 mb-4">
                            <label for="regularPrice" class="form-label">Regular Price</label>
                            <input placeholder="$" name="regularPrice" type="text" value="<%= product.regularPrice %>" class="form-control border" id="regularPrice">
                            <div id="regularPrice-error" class="error-message"></div>
                        </div>

                        <!-- Sale Price -->
                        <div class="col-lg-4 mb-4">
                            <label for="salePrice" class="form-label">Sale Price</label>
                            <input name="salePrice" type="text" value="<%= product.salePrice %>" class="form-control border" id="salePrice">
                            <div id="salePrice-error" class="error-message"></div>
                        </div>

                        <!-- Quantity -->
                        <div class="col-lg-4 mb-4">
                            <label for="quantity" class="form-label">Quantity</label>
                            <input name="quantity" type="text" value="<%= product.quantity %>" class="form-control border" id="quantity">
                            <div id="quantity-error" class="error-message"></div>
                        </div>

                        <!-- Category -->
                        <div class="mb-4">
                            <label for="category" class="form-label">Category</label>
                            <select class="form-select border" name="category">
                                <% for (let i = 0; i < cat.length; i++) { %>
                                    <option value="<%= cat[i]._id %>" <%= product.category._id.toString() === cat[i]._id.toString() ? 'selected' : '' %>> 
                                        <%= cat[i].name %>
                                    </option>
                                <% } %>
                            </select>
                            <div id="category-error" class="error-message"></div>
                        </div>

                        <!-- Existing Images -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Existing Images</h4>
                            </div>
                            <div class="card-body">
                                <div class="thumbnails-container">
                                    <% if (product.productImages && product.productImages.length > 0) { %>
                                        <% product.productImages.forEach((image, index) => { %>
                                            <div class="thumbnail">
                                                <img src="/uploads/re-image/<%= image %>" alt="Product Image" style="width: 80px; height: 80px;">
                                                <i onclick="deleteImage('<%= image %>', '<%= product._id %>')" class="fa fa-trash" style="cursor: pointer;"></i>
                                            </div>
                                        <% }) %>
                                    <% } else { %>
                                        <p>No images available</p>
                                    <% } %>
                                </div>
                            </div>
                        </div>

                        <!-- Image Upload Section -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Product Images</h4>
                            </div>
                            <div class="card-body">
                                <input 
                                    type="file" 
                                    id="imageInput" 
                                    class="form-control" 
                                    accept="image/*" 
                                    multiple
                                >
                                
                                <!-- Preview Container -->
                                <div id="imagePreviewContainer" class="mt-3"></div>
                            </div>
                        </div>

                        <!-- Update Button -->
                        <button type="submit" class="btn btn-md btn-primary btn-update">Update</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Cropper Modal -->
<div id="cropperModal" class="modal" tabindex="-1" role="dialog" style="display:none;">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Crop Image</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeCropModal()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="cropper-container">
                    <img id="cropperImage" src="" alt="Image to crop" style="max-width: 100%;">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeCropModal()">Skip</button>
                <button type="button" class="btn btn-primary" onclick="applyCrop()">Crop</button>
            </div>
        </div>
    </div>
</div>

<style>
#cropperModal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
    display: none;
    z-index: 1000;
    justify-content: center;
    align-items: center;
}

#cropperModal .modal-dialog {
    max-width: 80%;
    margin: auto;
}

.cropper-container {
    max-height: 70vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

#imagePreviewContainer {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 15px;
}

.preview-item {
    position: relative;
    width: 100px;
    height: 100px;
}

.preview-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.preview-item .remove-btn {
    position: absolute;
    top: 5px;
    right: 5px;
    font-size: 0.6rem;
    padding: 0.1rem 0.3rem;
}
</style>

<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const imageInput = document.getElementById('imageInput');
    const imagePreviewContainer = document.getElementById('imagePreviewContainer');
    const cropperModal = document.getElementById('cropperModal');
    const cropperImage = document.getElementById('cropperImage');
    
    let cropper = null;
    let uploadQueue = [];
    let processedImages = [];

    // Handle file selection
    imageInput.addEventListener('change', function(event) {
        // Clear previous previews and processed images
        imagePreviewContainer.innerHTML = '';
        processedImages = [];
        
        // Convert FileList to array
        uploadQueue = Array.from(this.files);
        
        // Start processing images
        processNextImage();
    });

    // Process images sequentially
    function processNextImage() {
        // If no more images in queue, stop
        if (uploadQueue.length === 0) return;

        const file = uploadQueue[0];

        // Validate file type and size
        if (!['image/jpeg', 'image/png', 'image/gif'].includes(file.type)) {
            alert(`Invalid file type for ${file.name}. Only JPEG, PNG, and GIF are allowed.`);
            uploadQueue.shift();
            processNextImage();
            return;
        }

        if (file.size > 5 * 1024 * 1024) {
            alert(`${file.name} is too large. Maximum file size is 5MB.`);
            uploadQueue.shift();
            processNextImage();
            return;
        }

        // Read file
        const reader = new FileReader();
        reader.onload = function(e) {
            // Set cropper image source
            cropperImage.src = e.target.result;

            // Show cropper modal
            cropperModal.style.display = 'block';

            // Initialize or reset cropper
            if (cropper) {
                cropper.destroy();
            }
            cropper = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 1,
                guides: true
            });

            // Update modal title to show current image progress
            document.querySelector('#cropperModal .modal-title').textContent = 
                `Crop Image (${processedImages.length + 1}/${uploadQueue.length + processedImages.length})`;
        };

        reader.readAsDataURL(file);
    }

    // Apply crop and move to next image
    window.applyCrop = function() {
        if (!cropper) return;

        // Get cropped canvas
        const croppedCanvas = cropper.getCroppedCanvas({
            width: 300,
            height: 300
        });

        // Convert canvas to blob
        croppedCanvas.toBlob(function(blob) {
            // Create a file from the blob
            const croppedFile = new File([blob], `image_${processedImages.length}.jpg`, { type: 'image/jpeg' });
            processedImages.push(croppedFile);

            // Create preview element
            const previewDiv = document.createElement('div');
            previewDiv.className = 'preview-item position-relative m-2';
            previewDiv.innerHTML = `
                <img 
                    src="${croppedCanvas.toDataURL('image/jpeg')}" 
                    class="img-thumbnail preview-image" 
                    style="width: 100px; height: 100px; object-fit: cover;"
                >
                <button 
                    class="btn btn-danger btn-sm position-absolute top-0 end-0 remove-btn"
                >
                    &times;
                </button>
            `;

            // Add to preview container
            imagePreviewContainer.appendChild(previewDiv);

            // Add remove event listener
            const removeBtn = previewDiv.querySelector('.remove-btn');
            removeBtn.addEventListener('click', function() {
                previewDiv.remove();
                // Remove corresponding file from processedImages
                const imgSrc = previewDiv.querySelector('img').src;
                const index = processedImages.findIndex(file => 
                    file.name === `image_${processedImages.indexOf(processedImages.find(f => f.name === file.name))}.jpg`
                );
                if (index !== -1) {
                    processedImages.splice(index, 1);
                }
            });

            // Close modal
            closeCropModal();

            // Remove processed image from queue
            uploadQueue.shift();

            // Process next image
            processNextImage();
        }, 'image/jpeg');
    };

    // Close crop modal
    window.closeCropModal = function() {
        // Hide modal
        cropperModal.style.display = 'none';

        // Destroy cropper
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }

        // Remove skipped image from queue
        uploadQueue.shift();

        // Process next image
        processNextImage();
    };

    // Form submission handler
    document.querySelector('form').addEventListener('submit', function(event) {
        event.preventDefault();

        // Validate form before submission
        if (!validateForm()) {
            console.error('Form validation failed');
            return;
        }

        // Create FormData
        const formData = new FormData(this);

        // Check if any images are selected
        const existingImages = this.querySelectorAll('input[name="existingImages"]');
        if (processedImages.length === 0 && existingImages.length === 0) {
            alert('Please upload at least one product image');
            return;
        }

        // Add processed images to form data
        processedImages.forEach((file, index) => {
            formData.append('images', file, `image_${index}.jpg`);
        });

        // Show loading indicator
        const submitButton = this.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML = 'Updating... <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';

        // Submit form
        fetch(this.action, {
            method: this.method,
            body: formData
        })
        .then(response => {
            // Always try to parse as JSON
            return response.json().then(data => {
                if (!response.ok) {
                    // If response is not ok, throw an error with the server's message
                    throw new Error(data.message || `HTTP error! status: ${response.status}`);
                }
                return data;
            }).catch(() => {
                // If JSON parsing fails, throw a generic error
                throw new Error(`Unexpected response format. Status: ${response.status}`);
            });
        })
        .then(data => {
            if (data.status) {
                // Success
                alert('Product updated successfully');
                window.location.href = '/admin/products';
            } else {
                // Server returned a failure status
                throw new Error(data.message || 'Failed to update product');
            }
        })
        .catch(error => {
            // Detailed error logging
            console.error('Update error details:', {
                message: error.message,
                name: error.name,
                stack: error.stack
            });

            // User-friendly error message
            alert(`Failed to update product: ${error.message || 'Unknown error occurred'}`);
            
            // Re-enable submit button
            const submitButton = this.querySelector('button[type="submit"]');
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
        });
    });
});
</script>

<script>
// Form Validation
function validateForm() {
    clearErrorMessages();
    const name = document.getElementsByName('productName')[0].value;
    const description = document.getElementsByName('descriptionData')[0].value;
    const price = document.getElementsByName('regularPrice')[0].value;
    const saleprice = document.getElementsByName('salePrice')[0].value;
    const quantity = document.getElementsByName('quantity')[0].value;
    const category = document.getElementsByName('category')[0].value;
    const images = document.getElementById('input1');

    let isValid = true;

    if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    }

    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    }

    if (parseInt(quantity) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
        isValid = false;
    }

    if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }

    if (!/^\d+(\.\d{1,2})?$/.test(saleprice) || parseFloat(saleprice) < 0) {
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }

    if (category.trim() === "") {
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
    }

    return isValid;
}

function displayErrorMessage(elementId, message) {
    var errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
        element.style.display = 'none';
    });
}

function deleteImage(image, productId) {
    if (confirm('Are you sure you want to delete this image?')) {
        fetch('/admin/deleteImage', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                imageNameToServer: image,
                productIdToServer: productId
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            if (data.status) {
                // Remove the specific image from the DOM
                const imageElement = document.querySelector(`img[src*="${image}"]`).closest('.thumbnail');
                if (imageElement) {
                    imageElement.remove();
                }
                
                alert('Image deleted successfully');
            } else {
                alert(data.message || 'Failed to delete image');
            }
        })
        .catch(error => {
            console.error('Comprehensive error:', error);
            alert('An error occurred while deleting the image: ' + error.message);
        });
    }
}
</script>

<%- include("../../views/partials/admin/footer") %>
