<%- include("../../views/partials/admin/header") %>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
</head>
<style>
    body {
        background-color: #eef2f7;
        font-family: 'Roboto', sans-serif;
    }

    .content-main {
        margin-top: 40px;
        margin-left: 260px;
        padding: 25px;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    }

    .headname {
        margin-left: 288px;
        margin-top: 80px;
        font-size: 36px;
        font-weight: bold;
        color: #343a40;
    }

    .form-label {
        color: #495057;
        font-weight: 600;
    }

    .form-control, .form-select {
        border: 1px solid #ced4da;
        border-radius: 8px;
        padding: 12px;
        transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

    .form-control:focus, .form-select:focus {
        border-color: #007bff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .btn-submit {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 8px;
        font-weight: bold;
        transition: background-color 0.2s ease;
    }

    .btn-submit:hover {
        background-color: #0056b3;
    }

    .image-upload-section {
        background-color: #f8f9fa;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .existing-image-container {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 15px;
    }

    .existing-image {
        width: 120px;
        height: 120px;
        object-fit: cover;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .delete-image-btn {
        background-color: #dc3545;
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .delete-image-btn:hover {
        background-color: #c82333;
    }

    .error-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .thumbnails-container {
        display: flex;
        gap: 15px;
        overflow-x: auto;
        padding-bottom: 10px;
    }

    .thumbnail {
        width: 120px;
        height: 120px;
        object-fit: cover;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .crop-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 10px;
    }
    .crop-save-btn {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }
    .crop-save-btn:hover {
        background-color: #218838;
    }
    .crop-preview {
        max-width: 200px;
        max-height: 200px;
        margin-top: 10px;
    }

    /* Cropper Modal Styles */
    #cropperModal {
        display: none;
        position: fixed;
        z-index: 1050;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.5);
        align-items: center;
        justify-content: center;
        padding: 20px;
        box-sizing: border-box;
    }

    .crop-modal-content {
        background-color: #fefefe;
        border-radius: 10px;
        width: 100%;
        max-width: 600px;
        max-height: 80vh;
        position: relative;
        display: flex;
        flex-direction: column;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .crop-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background-color: #f1f1f1;
        border-bottom: 1px solid #ddd;
    }

    .crop-modal-header h3 {
        margin: 0;
        font-size: 1.2rem;
    }

    .crop-modal-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: #666;
        transition: color 0.3s ease;
    }

    .crop-modal-close:hover {
        color: #000;
    }

    .crop-modal-body {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 15px;
        max-height: 500px;
        overflow: hidden;
    }

    #cropperImage {
        max-width: 100%;
        max-height: 400px;
        object-fit: contain;
    }

    .crop-modal-footer {
        display: flex;
        justify-content: space-between;
        padding: 15px;
        background-color: #f1f1f1;
        border-top: 1px solid #ddd;
    }

    #addedImagesContainer .thumbnail {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 10px;
        position: relative;
        border: 2px solid #ddd;
        transition: transform 0.3s ease;
    }

    #addedImagesContainer .thumbnail:hover {
        transform: scale(1.05);
    }
</style>
<section class="content-main">
    <div class="row">
        <div class="col-12">
            <div class="content-header">
                <h2 class="content-title">Edit Product</h2>
            </div>
            <div class="col-lg-8 mx-auto">
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="POST" action="/admin/editProduct/<%= product._id %>" enctype="multipart/form-data" onsubmit="return validateForm()">
                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name" value="<%= product.productName %>">
                                <div id="productName-error" class="error-message"></div>
                            </div>

                            <div class="mb-4">
                                <label for="description" class="form-label">Description</label>
                                <textarea placeholder="Type here" name="description" class="form-control" id="description" rows="4"><%= product.description %></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>

                            <div class="row">
                                <div class="col-lg-6 mb-4">
                                    <label for="category" class="form-label">Category</label>
                                    <select name="category" class="form-select" id="category">
                                        <% cat.forEach(function(category) { %>
                                            <option value="<%= category.name %>" <%= product.category.toString() === category._id.toString() ? 'selected' : '' %>>
                                                <%= category.name %>
                                            </option>
                                        <% }); %>
                                    </select>
                                </div>
                                <div class="col-lg-6 mb-4">
                                    <label for="quantity" class="form-label">Quantity</label>
                                    <input type="number" placeholder="Enter quantity" name="quantity" class="form-control" id="quantity" value="<%= product.quantity %>">
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-lg-4 mb-4">
                                    <label for="regularPrice" class="form-label">Regular Price</label>
                                    <input type="number" placeholder="Enter regular price" name="regularPrice" class="form-control" id="regularPrice" value="<%= product.regularPrice %>">
                                </div>
                                <div class="col-lg-4 mb-4">
                                    <label for="salePrice" class="form-label">Sale Price</label>
                                    <input type="number" placeholder="Enter sale price" name="salePrice" class="form-control" id="salePrice" value="<%= product.salePrice %>">
                                </div>
                                <div class="col-lg-4 mb-4">
                                    <label for="size" class="form-label">Size</label>
                                    <input type="text" placeholder="Enter size" name="size" class="form-control" id="size" value="<%= product.size %>">
                                </div>
                            </div>

                            <div class="card mb-4 image-upload-section">
                                <div class="card-header">
                                    <h4>Existing Images</h4>
                                </div>
                                <div class="card-body">
                                    <div id="existingImagesContainer" class="thumbnails-container">
                                        <% product.productImages.forEach((image, index) => { %>
                                            <div class="existing-image-container" id="existingImageContainer<%= index %>">
                                                <img src="/uploads/product-images/<%= image %>" alt="Product Image" class="existing-image">
                                                <button type="button" class="delete-image-btn" onclick="deleteExistingImage('<%= image %>', <%= index %>)">Delete</button>
                                            </div>
                                        <% }); %>
                                    </div>
                                </div>
                            </div>

                            <div class="card mb-4 image-upload-section">
                                <div class="card-header">
                                    <h4>Add/Replace Images</h4>
                                </div>
                                <div class="card-body">
                                    <div class="image-upload-container">
                                        <input type="file" 
                                               id="imageUpload" 
                                               name="images" 
                                               class="form-control" 
                                               accept="image/*" 
                                               onchange="openCropperModal(event)">
                                        
                                        <!-- Hidden input to store cropped images -->
                                        <input type="hidden" id="deletedImagesInput" name="deletedImages" value="[]">
                                        
                                        <!-- Added Images Container -->
                                        <div id="addedImagesContainer" class="mt-3"></div>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label for="isListed" class="form-label">Product Status</label>
                                <select name="isListed" class="form-select" id="isListed">
                                    <option value="true" <%= product.isListed ? 'selected' : '' %>>Listed</option>
                                    <option value="false" <%= !product.isListed ? 'selected' : '' %>>Unlisted</option>
                                </select>
                            </div>

                            <div class="d-grid">
                                <button type="submit" class="btn btn-submit">Update Product</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Cropper Modal -->
<div id="cropperModal" class="modal">
    <div class="crop-modal-content">
        <div class="crop-modal-header">
            <h3>Crop Image</h3>
            <button class="crop-modal-close" onclick="closeCropperModal()">&times;</button>
        </div>
        <div class="crop-modal-body">
            <img id="cropperImage" src="" alt="Image to crop">
        </div>
        <div class="crop-modal-footer">
            <button type="button" class="btn btn-secondary" onclick="closeCropperModal()">Cancel</button>
            <button type="button" class="btn btn-primary" onclick="saveCroppedImage()">Complete Crop</button>
        </div>
    </div>
</div>

<script>
    let existingImages = <%- JSON.stringify(product.productImages || []) %>;
    let deletedImages = [];
    let cropper;
    let croppedImagesCount = 0;

    function openCropperModal(event) {
        const file = event.target.files[0];
        if (!file) return;

        // Validate file type
        const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
        if (!validTypes.includes(file.type)) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid File Type',
                text: 'Please upload a valid image (JPEG, PNG, or GIF)',
                confirmButtonColor: '#3085d6'
            });
            return;
        }

        // Read file
        const reader = new FileReader();
        reader.onload = function(e) {
            const cropperImage = document.getElementById('cropperImage');
            cropperImage.src = e.target.result;

            // Destroy existing cropper if any
            if (cropper) {
                cropper.destroy();
            }

            // Wait for image to load
            cropperImage.onload = function() {
                // Determine aspect ratio based on image dimensions
                const aspectRatio = cropperImage.naturalWidth / cropperImage.naturalHeight;

                // Initialize Cropper with dynamic aspect ratio
                cropper = new Cropper(cropperImage, {
                    aspectRatio: aspectRatio, // Use image's natural aspect ratio
                    viewMode: 1,
                    minCropBoxWidth: 100,
                    minCropBoxHeight: 100,
                    autoCropArea: 0.8, // Default crop area
                    responsive: true,
                    restore: true,
                    guides: true,
                    center: true,
                    highlight: true,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                });

                // Show modal
                document.getElementById('cropperModal').style.display = 'flex';
            };
        };
        reader.readAsDataURL(file);
    }

    function closeCropperModal() {
        // Hide modal
        document.getElementById('cropperModal').style.display = 'none';

        // Destroy cropper
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }

        // Clear file input
        document.getElementById('imageUpload').value = '';
    }

    function saveCroppedImage() {
        if (!cropper) return;

        // Validate total images
        if (existingImages.length - deletedImages.length + croppedImagesCount >= 4) {
            Swal.fire({
                icon: 'warning',
                title: 'Image Limit Reached',
                text: 'Maximum 4 images allowed',
                confirmButtonColor: '#3085d6'
            });
            closeCropperModal();
            return;
        }

        // Get cropped image
        const croppedCanvas = cropper.getCroppedCanvas({
            width: 440, // Consistent width for all images
            height: 440, // Consistent height for all images
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high'
        });

        const croppedDataUrl = croppedCanvas.toDataURL('image/jpeg', 0.9); // High quality

        // Create thumbnail
        const thumbnailContainer = document.createElement('div');
        thumbnailContainer.style.position = 'relative';

        const thumbnailImg = document.createElement('img');
        thumbnailImg.src = croppedDataUrl;
        thumbnailImg.classList.add('thumbnail');

        // Remove button
        const removeBtn = document.createElement('button');
        removeBtn.innerHTML = '&times;';
        removeBtn.classList.add('remove-image-btn');
        removeBtn.onclick = () => removeCroppedImage(thumbnailContainer);

        thumbnailContainer.appendChild(thumbnailImg);
        thumbnailContainer.appendChild(removeBtn);

        // Add to images container
        const addedImagesContainer = document.getElementById('addedImagesContainer');
        addedImagesContainer.appendChild(thumbnailContainer);

        // Create hidden input for cropped image
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = `croppedImage${croppedImagesCount + 1}`;
        hiddenInput.value = croppedDataUrl;
        document.querySelector('form').appendChild(hiddenInput);

        // Increment cropped images count
        croppedImagesCount++;

        // Clear file input
        document.getElementById('imageUpload').value = '';

        // Show success toast
        Swal.fire({
            icon: 'success',
            title: 'Image Cropped',
            text: 'Image has been successfully cropped and added',
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 2000
        });

        // Close modal
        closeCropperModal();
    }

    function removeCroppedImage(thumbnailContainer) {
        Swal.fire({
            title: 'Remove Image',
            text: 'Are you sure you want to remove this image?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
        }).then((result) => {
            if (result.isConfirmed) {
                // Remove thumbnail
                thumbnailContainer.remove();

                // Decrement cropped images count
                croppedImagesCount--;

                Swal.fire({
                    icon: 'success',
                    title: 'Image Removed',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 2000
                });
            }
        });
    }

    function validateForm() {
        const totalImages = existingImages.length - deletedImages.length + croppedImagesCount;

        if (totalImages < 3 || totalImages > 4) {
            Swal.fire({
                icon: 'error',
                title: 'Image Count Invalid',
                text: 'You must have between 3 and 4 images in total',
                confirmButtonColor: '#3085d6'
            });
            return false;
        }

        return true;
    }

    function deleteExistingImage(imageName, index) {
        Swal.fire({
            title: 'Remove Existing Image',
            text: 'Are you sure you want to remove this image?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
        }).then((result) => {
            if (result.isConfirmed) {
                const container = document.getElementById(`existingImageContainer${index}`);
                if (container) {
                    container.remove();
                }
                
                // Add the image to deleted images if not already present
                if (!deletedImages.includes(imageName)) {
                    deletedImages.push(imageName);
                }
                
                // Update hidden input for deleted images
                document.getElementById('deletedImagesInput').value = JSON.stringify(deletedImages);

                Swal.fire({
                    icon: 'success',
                    title: 'Image Removed',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 2000
                });
            }
        });
    }
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
<%- include("../../views/partials/admin/footer") %>
